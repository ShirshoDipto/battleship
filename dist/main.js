/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/displayControllers/gameplay.js":
/*!********************************************!*\
  !*** ./src/displayControllers/gameplay.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   renderGameplayScreen: () => (/* binding */ renderGameplayScreen)\n/* harmony export */ });\n/* harmony import */ var _prepInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./prepInterface */ \"./src/displayControllers/prepInterface.js\");\n\r\n\r\nfunction renderGameplayScreen(container, players, gameboards) {\r\n  container.innerHTML = `\r\n                        <div class=\"main-wrapper\">\r\n                          <div class=\"main-top\">${\r\n                            players[0].isPlayerTurn\r\n                              ? \"Your Turn\"\r\n                              : \"Opponent's Turn\"\r\n                          }</div>\r\n                          <div class=\"main-middle\">\r\n                            <div class=\"boards-wrapper\">\r\n                              <div class=\"player-board-container ${\r\n                                players[0].isPlayerTurn ? \"opaqued\" : \"\"\r\n                              }\"></div>\r\n                              <div class=\"opponent-board-container ${\r\n                                players[1].isPlayerTurn ? \"opaqued\" : \"\"\r\n                              }\"></div>\r\n                            </div>\r\n                          </div>\r\n                          <div class=\"main-bottom\">\r\n                            <div class=\"board-options-wrapper\">\r\n                              <div class=\"board-options-container\">\r\n                                <a href=\"javascript:;\" id=\"game-exit\" class=\"board-option\">Leave Game</a>\r\n                              </div>             \r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        `;\r\n\r\n  const playerBoard = container.querySelector(\".player-board-container\");\r\n  const opponentBoard = container.querySelector(\".opponent-board-container\");\r\n  _prepInterface__WEBPACK_IMPORTED_MODULE_0__.renderGameboard(playerBoard, gameboards[0], players[0], false);\r\n  _prepInterface__WEBPACK_IMPORTED_MODULE_0__.renderGameboard(opponentBoard, gameboards[1], players[0], false); //Make sure to give proper player Id\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://battleship/./src/displayControllers/gameplay.js?");

/***/ }),

/***/ "./src/displayControllers/prepInterface.js":
/*!*************************************************!*\
  !*** ./src/displayControllers/prepInterface.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   renderGameboard: () => (/* binding */ renderGameboard),\n/* harmony export */   renderHome: () => (/* binding */ renderHome),\n/* harmony export */   renderPreparations: () => (/* binding */ renderPreparations),\n/* harmony export */   renderShipsContainer: () => (/* binding */ renderShipsContainer)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ \"./src/index.js\");\n\r\n\r\nconst renderCross = (container) => {\r\n  container.innerHTML = `\r\n                        <div class=\"cross-container\">\r\n                          <div class=\"horizontal\">h</div>\r\n                          <div class=\"vertical\">v</div>\r\n                        </div>\r\n                        `;\r\n};\r\n\r\nconst giveEventListeners = (cells, player) => {\r\n  const cellsArray = Array.from(cells);\r\n  const playersCells = cellsArray.filter((c) => {\r\n    return c.getAttribute(\"playerId\") === player.id;\r\n  });\r\n\r\n  playersCells.forEach((pc) => {\r\n    pc.addEventListener(\"click\", _index__WEBPACK_IMPORTED_MODULE_0__.handlePlayerMove);\r\n  });\r\n};\r\n\r\nconst renderShip = (container, ship, isPreparing) => {\r\n  const shipCells = [];\r\n  const shipAxis = ship.axis === \"x\" ? \"draggable-x\" : \"draggable-y\";\r\n  const dragged = ship.coords.length !== 0 ? \"dragged\" : \"\";\r\n  const cursortype = isPreparing ? \"\" : \"no-cursor\";\r\n  let shipStyle = `style=\"grid-template-columns: repeat(${ship.shipLength}, var(--cell-width));\"`;\r\n  if (ship.axis === \"y\") {\r\n    shipStyle = `style=\"grid-template-rows: repeat(${ship.shipLength}, var(--cell-width));\"`;\r\n  }\r\n\r\n  for (let i = 0; i < ship.shipLength; i += 1) {\r\n    const cell = `<div class=\"ship-cell\"></div>`;\r\n    shipCells.push(cell);\r\n  }\r\n\r\n  container.innerHTML += `\r\n                          <div class=\"draggable ${dragged} ${shipAxis} ${cursortype}\" ${shipStyle} \r\n                            name=\"${ship.name}\" draggable=\"${isPreparing}\">\r\n                            ${shipCells.join(\"\")}\r\n                          </div>\r\n                        `;\r\n};\r\n\r\nconst getMarkStatus = (cellDiv, cellData) => {\r\n  if (cellData.ship && cellData.markStatus) {\r\n    renderCross(cellDiv);\r\n    if (cellData.ship.shipObj.isSunk()) {\r\n      cellDiv.classList.add(\"sunk\");\r\n    }\r\n  }\r\n\r\n  if (cellData.markStatus === \"hit\" && !cellData.ship) {\r\n    cellDiv.classList.add(\"hit\");\r\n  } else if (cellData.markStatus === \"last\") {\r\n    cellDiv.classList.add(\"last\");\r\n  }\r\n};\r\n\r\nconst renderCells = (container, board, player, isPreparing) => {\r\n  const grid = board.grid;\r\n  for (let row = 0; row < grid.length; row += 1) {\r\n    for (let col = 0; col < grid[0].length; col += 1) {\r\n      container.innerHTML += `<div class=\"cell\" playerId=\"${player.id}\" row=\"${row}\" col=\"${col}\"></div>`;\r\n      const elem = container.querySelector(`[row=\"${row}\"][col=\"${col}\"].cell`);\r\n      const cellData = grid[row][col];\r\n      getMarkStatus(elem, cellData);\r\n      if (cellData.ship?.isStartCoord && player.id === board.playerId) {\r\n        renderShip(elem, cellData.ship.shipObj, isPreparing);\r\n      } else if (\r\n        player.id !== board.playerId &&\r\n        !cellData.markStatus &&\r\n        player.isPlayerTurn\r\n      ) {\r\n        elem.classList.add(\"hover-effect\");\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst renderGameboard = (container, board, player, isPreping) => {\r\n  container.innerHTML = `\r\n                          <div class=\"coord-num\"></div>\r\n                          <div class=\"coord-num\">0</div>\r\n                          <div class=\"coord-num\">1</div>\r\n                          <div class=\"coord-num\">2</div>\r\n                          <div class=\"coord-num\">3</div>\r\n                          <div class=\"coord-num\">4</div>\r\n                          <div class=\"coord-num\">5</div>\r\n                          <div class=\"coord-num\">6</div>\r\n                          <div class=\"coord-num\">7</div>\r\n                          <div class=\"coord-num\">8</div>\r\n                          <div class=\"coord-num\">9</div>\r\n                          <div class=\"coord-num\">0</div>\r\n                          <div class=\"coord-num\">1</div>\r\n                          <div class=\"coord-num\">2</div>\r\n                          <div class=\"coord-num\">3</div>\r\n                          <div class=\"coord-num\">4</div>\r\n                          <div class=\"coord-num\">5</div>\r\n                          <div class=\"coord-num\">6</div>\r\n                          <div class=\"coord-num\">7</div>\r\n                          <div class=\"coord-num\">8</div>\r\n                          <div class=\"coord-num\">9</div>\r\n\r\n                          <div class=\"main-grid\"></div>`;\r\n\r\n  const mainGrid = container.querySelector(\".main-grid\");\r\n  renderCells(mainGrid, board, player, isPreping);\r\n\r\n  const cells = container.querySelectorAll(\".cell\");\r\n  if (!isPreping && player.isPlayerTurn) {\r\n    giveEventListeners(cells, player);\r\n  } else {\r\n    cells.forEach((cell) => {\r\n      cell.addEventListener(\"dragover\", (e) => e.preventDefault());\r\n    });\r\n\r\n    const ships = container.querySelectorAll(\".draggable\");\r\n    ships.forEach((ship) => {\r\n      ship.addEventListener(\"click\", _index__WEBPACK_IMPORTED_MODULE_0__.rotateShip);\r\n      ship.addEventListener(\"dragstart\", _index__WEBPACK_IMPORTED_MODULE_0__.getMeasurements);\r\n      ship.addEventListener(\"drag\", _index__WEBPACK_IMPORTED_MODULE_0__.displayDraggablePositions);\r\n      ship.addEventListener(\"dragend\", _index__WEBPACK_IMPORTED_MODULE_0__.placeShipOnBoard);\r\n    });\r\n  }\r\n};\r\n\r\nconst renderShipsContainer = (container, isShipShowing) => {\r\n  container.innerHTML = `\r\n                        <div class=\"ships-container\">\r\n                          <div class=\"ship-row\">\r\n                            <div class=\"len4-container ship-container\" name=\"carrier\">\r\n                              <div class=\"draggable draggable-x ${\r\n                                isShipShowing ? \"\" : \"hide\"\r\n                              }\" style=\"grid-template-columns: repeat(4, var(--cell-width));\" name=\"carrier\" draggable=\"true\">\r\n                                <div class=\"ship-cell\"></div><div class=\"ship-cell\"></div><div class=\"ship-cell\"></div><div class=\"ship-cell\"></div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div class=\"ship-row\">\r\n                            <div class=\"len3-container ship-container\" name=\"battleship1\">\r\n                              <div class=\" ${\r\n                                isShipShowing ? \"\" : \"hide\"\r\n                              } draggable draggable-x \" style=\"grid-template-columns: repeat(3, var(--cell-width));\" name=\"battleship1\" draggable=\"true\">\r\n                                <div class=\"ship-cell\"></div><div class=\"ship-cell\"></div><div class=\"ship-cell\"></div>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div class=\"len3-container ship-container\" name=\"battleship2\">\r\n                              <div class=\"${\r\n                                isShipShowing ? \"\" : \"hide\"\r\n                              } draggable draggable-x\" style=\"grid-template-columns: repeat(3, var(--cell-width));\" name=\"battleship2\" draggable=\"true\">\r\n                                <div class=\"ship-cell\"></div><div class=\"ship-cell\"></div><div class=\"ship-cell\"></div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div class=\"ship-row\">\r\n                            <div class=\"len2-container ship-container\" name=\"submarine1\">\r\n                              <div class=\"${\r\n                                isShipShowing ? \"\" : \"hide\"\r\n                              } draggable draggable-x\" style=\"grid-template-columns: repeat(2, var(--cell-width));\" name=\"submarine1\" draggable=\"true\">\r\n                                <div class=\"ship-cell\"></div><div class=\"ship-cell\"></div>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div class=\"len2-container ship-container\" name=\"submarine2\">\r\n                              <div class=\"${\r\n                                isShipShowing ? \"\" : \"hide\"\r\n                              } draggable draggable-x\" style=\"grid-template-columns: repeat(2, var(--cell-width));\" name=\"submarine2\" draggable=\"true\">\r\n                                <div class=\"ship-cell\"></div><div class=\"ship-cell\"></div>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div class=\"len2-container ship-container\" name=\"submarine3\">\r\n                              <div class=\"${\r\n                                isShipShowing ? \"\" : \"hide\"\r\n                              } draggable draggable-x\" style=\"grid-template-columns: repeat(2, var(--cell-width));\" name=\"submarine3\" draggable=\"true\">\r\n                                <div class=\"ship-cell\"></div><div class=\"ship-cell\"></div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div class=\"ship-row\">\r\n                            <div class=\"len1-container ship-container\" name=\"destroyer1\">\r\n                              <div class=\"${\r\n                                isShipShowing ? \"\" : \"hide\"\r\n                              } draggable draggable-x\" style=\"grid-template-columns: repeat(1, var(--cell-width));\" name=\"destroyer1\" draggable=\"true\">\r\n                                <div class=\"ship-cell\"></div>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div class=\"len1-container ship-container\" name=\"destroyer2\">\r\n                              <div class=\"${\r\n                                isShipShowing ? \"\" : \"hide\"\r\n                              } draggable draggable-x\" style=\"grid-template-columns: repeat(1, var(--cell-width));\" name=\"destroyer2\" draggable=\"true\">\r\n                                <div class=\"ship-cell\"></div>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div class=\"len1-container ship-container\" name=\"destroyer3\">\r\n                              <div class=\"${\r\n                                isShipShowing ? \"\" : \"hide\"\r\n                              } draggable draggable-x\" style=\"grid-template-columns: repeat(1, var(--cell-width));\" name=\"destroyer3\" draggable=\"true\">\r\n                                <div class=\"ship-cell\"></div>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div class=\"len1-container ship-container\" name=\"destroyer4\">\r\n                              <div class=\"${\r\n                                isShipShowing ? \"\" : \"hide\"\r\n                              } draggable draggable-x\" style=\"grid-template-columns: repeat(1, var(--cell-width));\" name=\"destroyer4\" draggable=\"true\">\r\n                                <div class=\"ship-cell\"></div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>`;\r\n\r\n  const draggables = container.querySelectorAll(\".draggable\");\r\n  draggables.forEach((d) => {\r\n    d.addEventListener(\"dragstart\", _index__WEBPACK_IMPORTED_MODULE_0__.getMeasurements);\r\n    d.addEventListener(\"drag\", _index__WEBPACK_IMPORTED_MODULE_0__.displayDraggablePositions);\r\n    d.addEventListener(\"dragend\", _index__WEBPACK_IMPORTED_MODULE_0__.placeShipOnBoard);\r\n    d.addEventListener(\"click\", _index__WEBPACK_IMPORTED_MODULE_0__.rotateShip);\r\n  });\r\n};\r\n\r\nconst renderPreparations = (container, gameboard, player, isPreparing) => {\r\n  container.innerHTML = `\r\n                          <div class=\"main-wrapper\">\r\n                            <div class=\"main-top\">Prepare your board</div>\r\n                            <div class=\"main-middle\">\r\n                              <div class=\"preparation-wrapper\">\r\n                                <div class=\"ships-container\">\r\n                                </div>\r\n                                <div class=\"board-container\">\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"main-bottom\">\r\n                              <div class=\"board-options-wrapper\">\r\n                                <div class=\"board-options-container\">\r\n                                  <a href=\"javascript:;\" id=\"board-randomize\" class=\"board-option\">Randomize</a>\r\n                                  <a href=\"javascript:;\" id=\"board-reset\" class=\"board-option\">Reset</a>\r\n                                </div>\r\n                                <div class=\"prep-buttons-container\">\r\n                                  <button class=\"prep-button\" id=\"back-from-prep\">Back</button>\r\n                                  <button class=\"prep-button\" id=\"start-from-prep\">Start</button>\r\n                                </div>              \r\n                              </div>\r\n                            </div>\r\n                          </div>  \r\n                          `;\r\n\r\n  const boardContainer = container.querySelector(\".board-container\");\r\n  const shipsContainer = container.querySelector(\".ships-container\");\r\n  const baordRandomize = container.querySelector(\"#board-randomize\");\r\n  const boardReset = container.querySelector(\"#board-reset\");\r\n  const backButton = container.querySelector(\"#back-from-prep\");\r\n  const startButton = container.querySelector(\"#start-from-prep\");\r\n\r\n  renderShipsContainer(shipsContainer, true);\r\n  renderGameboard(boardContainer, gameboard, player, isPreparing);\r\n  baordRandomize.addEventListener(\"click\", _index__WEBPACK_IMPORTED_MODULE_0__.randomizeBoard);\r\n  boardReset.addEventListener(\"click\", _index__WEBPACK_IMPORTED_MODULE_0__.resetBoard);\r\n  backButton.addEventListener(\"click\", _index__WEBPACK_IMPORTED_MODULE_0__.handleBackHome);\r\n  startButton.addEventListener(\"click\", _index__WEBPACK_IMPORTED_MODULE_0__.handleGameStart);\r\n};\r\n\r\nfunction renderHome(container) {\r\n  container.innerHTML = `\r\n                        <div class=\"main-wrapper\">\r\n                          <div class=\"main-top\"></div>\r\n                            <div class=\"main-middle\">\r\n                                <div class=\"opitons-wrapper\">\r\n                                    <button class=\"game-option\">vs Friend</button>\r\n                                    <button class=\"game-option\">vs AI</button>\r\n                                </div>\r\n                            </div>\r\n                          <div class=\"main-bottom\"></div>\r\n                        </div>\r\n                        `;\r\n  const buttons = container.querySelectorAll(\"button\");\r\n  buttons.forEach((button) => {\r\n    button.addEventListener(\"click\", _index__WEBPACK_IMPORTED_MODULE_0__.handleGameOption);\r\n  });\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://battleship/./src/displayControllers/prepInterface.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   displayDraggablePositions: () => (/* binding */ displayDraggablePositions),\n/* harmony export */   getMeasurements: () => (/* binding */ getMeasurements),\n/* harmony export */   handleBackHome: () => (/* binding */ handleBackHome),\n/* harmony export */   handleGameOption: () => (/* binding */ handleGameOption),\n/* harmony export */   handleGameStart: () => (/* binding */ handleGameStart),\n/* harmony export */   handlePlayerMove: () => (/* binding */ handlePlayerMove),\n/* harmony export */   placeShipOnBoard: () => (/* binding */ placeShipOnBoard),\n/* harmony export */   randomizeBoard: () => (/* binding */ randomizeBoard),\n/* harmony export */   resetBoard: () => (/* binding */ resetBoard),\n/* harmony export */   rotateShip: () => (/* binding */ rotateShip)\n/* harmony export */ });\n/* harmony import */ var _displayControllers_prepInterface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./displayControllers/prepInterface */ \"./src/displayControllers/prepInterface.js\");\n/* harmony import */ var _displayControllers_gameplay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./displayControllers/gameplay */ \"./src/displayControllers/gameplay.js\");\n/* harmony import */ var _models_Gameboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/Gameboard */ \"./src/models/Gameboard.js\");\n/* harmony import */ var _models_Player__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models/Player */ \"./src/models/Player.js\");\n\r\n\r\n\r\n\r\n\r\nconst main = document.querySelector(\".main\");\r\nlet players = [];\r\nlet gameboards = [];\r\n\r\nfunction handleGameOption(e) {\r\n  if (this.textContent === \"vs Friend\") {\r\n    // Multiplayer handling code\r\n  } else {\r\n    players.push(new _models_Player__WEBPACK_IMPORTED_MODULE_3__[\"default\"](\"host\"), new _models_Player__WEBPACK_IMPORTED_MODULE_3__[\"default\"](\"ai\"));\r\n    gameboards.push(new _models_Gameboard__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\"host\"), new _models_Gameboard__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\"ai\"));\r\n    gameboards[0].initiateGameboard();\r\n    gameboards[1].initiateGameboard();\r\n    gameboards[1].randomizeBoard();\r\n    _displayControllers_prepInterface__WEBPACK_IMPORTED_MODULE_0__.renderPreparations(main, gameboards[0], players[0].id, true);\r\n  }\r\n}\r\n\r\nconst gameOptions = document.querySelectorAll(\".game-option\");\r\ngameOptions.forEach((option) => {\r\n  option.addEventListener(\"click\", handleGameOption);\r\n});\r\n\r\nconst getElemAtPosition = (e, coord) => {\r\n  const clientXDistance = e.clientX - coord[0];\r\n  const clientYDistance = e.clientY - coord[1];\r\n  return document.elementFromPoint(clientXDistance, clientYDistance);\r\n};\r\n\r\nconst getCoords = (cellsArray) => {\r\n  const coords = [];\r\n  cellsArray.forEach((cell) => {\r\n    if (cell.classList.contains(\"cell\")) {\r\n      const row = cell.getAttribute(\"row\");\r\n      const col = cell.getAttribute(\"col\");\r\n      coords.push([parseInt(row), parseInt(col)]);\r\n    }\r\n  });\r\n\r\n  return coords;\r\n};\r\n\r\nconst getOriginalShipStatus = (elem, ship) => {\r\n  elem.classList.remove(\"dragging\", \"hide\");\r\n  ship.distanceFromMidToMouse = [];\r\n  ship.isDraggable = false;\r\n};\r\n\r\nconst getMeasurements = (e) => {\r\n  e.target.classList.add(\"dragging\");\r\n  const shipCells = e.target.querySelectorAll(\".ship-cell\");\r\n  const theShip = gameboards[0].allShips[e.target.getAttribute(\"name\")];\r\n\r\n  shipCells.forEach((cell) => {\r\n    const box = cell.getBoundingClientRect();\r\n    const midCoord = [box.width / 2 + box.x, box.height / 2 + box.y];\r\n    theShip.distanceFromMidToMouse.push([\r\n      e.clientX - midCoord[0],\r\n      e.clientY - midCoord[1],\r\n    ]);\r\n  });\r\n};\r\n\r\nconst displayDraggablePositions = (e) => {\r\n  let hoveredCells = [];\r\n  const theShip = gameboards[0].allShips[e.target.getAttribute(\"name\")];\r\n\r\n  if (theShip.isSameDraggingPos(e)) return;\r\n  const cells = document.querySelectorAll(\".cell\");\r\n  e.target.classList.add(\"hide\");\r\n\r\n  theShip.distanceFromMidToMouse.forEach((d) => {\r\n    const elemAtPosition = getElemAtPosition(e, d);\r\n    if (elemAtPosition && elemAtPosition.classList.contains(\"cell\")) {\r\n      hoveredCells.push(elemAtPosition);\r\n    }\r\n  });\r\n\r\n  const coords = getCoords(hoveredCells);\r\n\r\n  if (\r\n    coords.length === theShip.shipLength &&\r\n    gameboards[0].isValidLocation(theShip.name, theShip.axis, coords)\r\n  ) {\r\n    theShip.isDraggable = true;\r\n    cells.forEach((cell) => {\r\n      if (!hoveredCells.includes(cell)) {\r\n        cell.classList.remove(\"hovered\");\r\n      } else {\r\n        cell.classList.add(\"hovered\");\r\n      }\r\n    });\r\n  } else {\r\n    theShip.isDraggable = false;\r\n    cells.forEach((cell) => {\r\n      cell.classList.remove(\"hovered\");\r\n    });\r\n  }\r\n};\r\n\r\nconst placeShipOnBoard = (e) => {\r\n  const theShip = gameboards[0].allShips[e.target.getAttribute(\"name\")];\r\n  const cells = document.querySelectorAll(\".cell\");\r\n\r\n  if (!theShip.isDraggable) {\r\n    getOriginalShipStatus(e.target, theShip);\r\n    return;\r\n  }\r\n\r\n  const hoveredCells = Array.from(cells).filter((cell) =>\r\n    cell.classList.contains(\"hovered\")\r\n  );\r\n\r\n  const coords = getCoords(hoveredCells);\r\n  if (theShip.coords.length === 0) {\r\n    gameboards[0].placeShip(theShip.name, theShip.axis, coords);\r\n  } else {\r\n    gameboards[0].repositionShip(theShip.name, theShip.axis, coords);\r\n  }\r\n\r\n  const elemAtPosition = getElemAtPosition(\r\n    e,\r\n    theShip.distanceFromMidToMouse[0]\r\n  );\r\n\r\n  if (elemAtPosition.classList.contains(\"cell\")) {\r\n    elemAtPosition.appendChild(e.target);\r\n    e.target.classList.add(\"dragged\");\r\n  }\r\n\r\n  cells.forEach((cell) => {\r\n    cell.classList.remove(\"hovered\");\r\n  });\r\n\r\n  getOriginalShipStatus(e.target, theShip);\r\n};\r\n\r\nfunction rotateShip() {\r\n  const shipToRotate = gameboards[0].allShips[this.getAttribute(\"name\")];\r\n  if (shipToRotate.coords.length === 0) return;\r\n\r\n  const newCoords = shipToRotate.getCoordsForRotation();\r\n  const newAxis = shipToRotate.axis === \"x\" ? \"y\" : \"x\";\r\n  const boardContainer = document.querySelector(\".board-container\");\r\n\r\n  if (gameboards[0].isValidLocation(shipToRotate.name, newAxis, newCoords)) {\r\n    gameboards[0].repositionShip(shipToRotate.name, newAxis, newCoords);\r\n    _displayControllers_prepInterface__WEBPACK_IMPORTED_MODULE_0__.renderGameboard(boardContainer, gameboards[0], players[0], true);\r\n  } else {\r\n    this.classList.add(\"invalid\");\r\n    setTimeout(() => {\r\n      this.classList.remove(\"invalid\");\r\n    }, 500);\r\n  }\r\n}\r\n\r\nconst randomizeBoard = () => {\r\n  const boardContainer = document.querySelector(\".board-container\");\r\n  const shipsContainer = document.querySelector(\".ships-container\");\r\n  gameboards[0].initiateGameboard();\r\n  gameboards[0].randomizeBoard();\r\n  _displayControllers_prepInterface__WEBPACK_IMPORTED_MODULE_0__.renderGameboard(boardContainer, gameboards[0], players[0], true);\r\n  _displayControllers_prepInterface__WEBPACK_IMPORTED_MODULE_0__.renderShipsContainer(shipsContainer, false);\r\n};\r\n\r\nconst resetBoard = () => {\r\n  const boardContainer = document.querySelector(\".board-container\");\r\n  const shipsContainer = document.querySelector(\".ships-container\");\r\n  gameboards[0].initiateGameboard();\r\n  _displayControllers_prepInterface__WEBPACK_IMPORTED_MODULE_0__.renderGameboard(boardContainer, gameboards[0], players[0], true);\r\n  _displayControllers_prepInterface__WEBPACK_IMPORTED_MODULE_0__.renderShipsContainer(shipsContainer, true);\r\n};\r\n\r\nfunction handleBackHome() {\r\n  players = [];\r\n  gameboards = [];\r\n  _displayControllers_prepInterface__WEBPACK_IMPORTED_MODULE_0__.renderHome(main);\r\n}\r\n\r\nfunction handleGameStart() {\r\n  if (!gameboards.every((gb) => gb.areAllShipsPlaced())) {\r\n    return alert(\"Please place all your ships on board.\");\r\n  }\r\n  console.log(gameboards[1].allShips);\r\n\r\n  _models_Player__WEBPACK_IMPORTED_MODULE_3__[\"default\"].giveRandomTurn(players);\r\n  _displayControllers_gameplay__WEBPACK_IMPORTED_MODULE_1__.renderGameplayScreen(main, players, gameboards);\r\n}\r\n\r\nfunction handleAIAttackHelper() {\r\n  const val = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const isHit = players[1].genAIAttack(gameboards[0]);\r\n      _displayControllers_gameplay__WEBPACK_IMPORTED_MODULE_1__.renderGameplayScreen(main, players, gameboards);\r\n      resolve(isHit);\r\n    }, 500);\r\n  });\r\n\r\n  return val;\r\n}\r\n\r\nasync function handleAIAttack() {\r\n  let didHitShip = await handleAIAttackHelper();\r\n  while (didHitShip) {\r\n    didHitShip = await handleAIAttackHelper();\r\n  }\r\n  players[0].togglePlayerTurn();\r\n  _displayControllers_gameplay__WEBPACK_IMPORTED_MODULE_1__.renderGameplayScreen(main, players, gameboards);\r\n}\r\n\r\nasync function handlePlayerMove(e) {\r\n  const coord = [\r\n    parseInt(this.getAttribute(\"row\")),\r\n    parseInt(this.getAttribute(\"col\")),\r\n  ];\r\n\r\n  const didHitShip = players[0].attack(gameboards[1], coord);\r\n  _displayControllers_gameplay__WEBPACK_IMPORTED_MODULE_1__.renderGameplayScreen(main, players, gameboards);\r\n\r\n  if (didHitShip) return;\r\n\r\n  players[1].togglePlayerTurn();\r\n  if (players[1].id === \"ai\") {\r\n    handleAIAttack();\r\n  }\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://battleship/./src/index.js?");

/***/ }),

/***/ "./src/models/Cell.js":
/*!****************************!*\
  !*** ./src/models/Cell.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Cell)\n/* harmony export */ });\nclass Cell {\r\n  markStatus = false;\r\n\r\n  ship = false;\r\n\r\n  constructor(playerId) {\r\n    this.playerId = playerId;\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://battleship/./src/models/Cell.js?");

/***/ }),

/***/ "./src/models/Gameboard.js":
/*!*********************************!*\
  !*** ./src/models/Gameboard.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Gameboard)\n/* harmony export */ });\n/* harmony import */ var _Ship__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ship */ \"./src/models/Ship.js\");\n/* harmony import */ var _Cell__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Cell */ \"./src/models/Cell.js\");\n\r\n\r\n\r\nclass Gameboard {\r\n  constructor(playerId) {\r\n    this.playerId = playerId;\r\n  }\r\n\r\n  SIZE = 10;\r\n\r\n  grid = [];\r\n\r\n  lastAttack = [];\r\n\r\n  allShips = {\r\n    carrier: new _Ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"carrier\", 4, \"x\"),\r\n    battleship1: new _Ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"battleship1\", 3, \"x\"),\r\n    battleship2: new _Ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"battleship2\", 3, \"x\"),\r\n    submarine1: new _Ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"submarine1\", 2, \"x\"),\r\n    submarine2: new _Ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"submarine2\", 2, \"x\"),\r\n    submarine3: new _Ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"submarine3\", 2, \"x\"),\r\n    destroyer1: new _Ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"destroyer1\", 1, \"x\"),\r\n    destroyer2: new _Ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"destroyer2\", 1, \"x\"),\r\n    destroyer3: new _Ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"destroyer3\", 1, \"x\"),\r\n    destroyer4: new _Ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"destroyer4\", 1, \"x\"),\r\n  };\r\n\r\n  initiateGameboard() {\r\n    this.grid = [];\r\n    for (let i = 0; i < this.SIZE; i += 1) {\r\n      const row = [];\r\n      for (let j = 0; j < this.SIZE; j += 1) {\r\n        row.push(new _Cell__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.playerId));\r\n      }\r\n      this.grid.push(row);\r\n    }\r\n\r\n    // Reset all ships\r\n    Object.values(this.allShips).forEach((ship) => {\r\n      ship.resetShipToOriginal();\r\n    });\r\n  }\r\n\r\n  placeShip(name, axis, coords) {\r\n    const theShip = this.allShips[name];\r\n    coords.forEach((c, i) => {\r\n      const cell = this.grid[c[0]][c[1]];\r\n      cell.ship = {\r\n        isStartCoord: i === 0,\r\n        shipObj: theShip,\r\n      };\r\n    });\r\n\r\n    theShip.axis = axis;\r\n    theShip.coords = coords;\r\n  }\r\n\r\n  repositionShip(name, newAxis, newCoords) {\r\n    const theShip = this.allShips[name];\r\n    theShip.coords.forEach((c) => {\r\n      const cell = this.grid[c[0]][c[1]];\r\n      cell.ship = false;\r\n    });\r\n\r\n    this.placeShip(name, newAxis, newCoords);\r\n  }\r\n\r\n  // Can't take the function inside the Ship class cause the coords parameter is not of Ship object.\r\n  getAdjacentsForAxisX(coords) {\r\n    const adjacents = [];\r\n\r\n    const head = [coords[0][0], coords[0][1] - 1];\r\n    const headNeighbor = [head[0] - 1, head[1]];\r\n    const tail = [coords[0][0], coords[coords.length - 1][1] + 1];\r\n    const tailNeighbor = [tail[0] + 1, tail[1]];\r\n\r\n    adjacents.push(head, headNeighbor, tail, tailNeighbor);\r\n\r\n    for (let i = 1; i !== coords.length + 2; i += 1) {\r\n      adjacents.push([headNeighbor[0], headNeighbor[1] + i]);\r\n      adjacents.push([tailNeighbor[0], tailNeighbor[1] - i]);\r\n    }\r\n\r\n    return adjacents;\r\n  }\r\n\r\n  getAdjacentsForAxisY(coords) {\r\n    const adjacents = [];\r\n\r\n    const head = [coords[0][0] - 1, coords[0][1]];\r\n    const headNeighbor = [head[0], head[1] - 1];\r\n    const tail = [coords[coords.length - 1][0] + 1, coords[0][1]];\r\n    const tailNeighbor = [tail[0], tail[1] + 1];\r\n\r\n    adjacents.push(head, headNeighbor, tail, tailNeighbor);\r\n\r\n    for (let i = 1; i !== coords.length + 2; i += 1) {\r\n      adjacents.push([headNeighbor[0] + i, headNeighbor[1]]);\r\n      adjacents.push([tailNeighbor[0] - i, tailNeighbor[1]]);\r\n    }\r\n\r\n    return adjacents;\r\n  }\r\n\r\n  areCoordsInGrid(coords) {\r\n    return coords.every((c) => this.grid[c[0]] && this.grid[c[0]][c[1]]);\r\n  }\r\n\r\n  isValidLocation(shipName, shipAxis, coords) {\r\n    if (!this.areCoordsInGrid(coords)) return false;\r\n\r\n    let coordsToCheck;\r\n    if (shipAxis === \"x\") {\r\n      coordsToCheck = [...this.getAdjacentsForAxisX(coords), ...coords];\r\n    } else {\r\n      coordsToCheck = [...this.getAdjacentsForAxisY(coords), ...coords];\r\n    }\r\n\r\n    // Check if at least one of the value in the adjacents array is invalid\r\n    const isInvalid = coordsToCheck.some((c) => {\r\n      const row = this.grid[c[0]];\r\n      const pos = row ? row[c[1]] : false;\r\n\r\n      return pos && pos.ship && pos.ship.shipObj.name !== shipName;\r\n    });\r\n\r\n    return !isInvalid; // If none of them are invalid, the location is valid\r\n  }\r\n\r\n  static generateRandomNum(range) {\r\n    return Math.floor(Math.random() * range);\r\n  }\r\n\r\n  generateRandomCoords(ship) {\r\n    const coords = [\r\n      [\r\n        Gameboard.generateRandomNum(this.SIZE),\r\n        Gameboard.generateRandomNum(this.SIZE),\r\n      ],\r\n    ];\r\n\r\n    for (let i = 1; i < ship.shipLength; i += 1) {\r\n      if (ship.axis === \"x\") {\r\n        coords.push([coords[0][0], coords[0][1] + i]);\r\n      } else {\r\n        coords.push([coords[0][0] + i, coords[0][1]]);\r\n      }\r\n    }\r\n\r\n    return coords;\r\n  }\r\n\r\n  shuffleShipsAxis() {\r\n    Object.values(this.allShips).forEach((s) => {\r\n      const randomNum = Gameboard.generateRandomNum(2);\r\n      s.axis = randomNum === 0 ? \"x\" : \"y\";\r\n    });\r\n  }\r\n\r\n  randomizeBoard() {\r\n    this.shuffleShipsAxis();\r\n    Object.values(this.allShips).forEach((s) => {\r\n      let isShipPlaced = false;\r\n      while (!isShipPlaced) {\r\n        const randomCoords = this.generateRandomCoords(s);\r\n        if (this.isValidLocation(s.name, s.axis, randomCoords)) {\r\n          this.placeShip(s.name, s.axis, randomCoords);\r\n          isShipPlaced = true;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  isAttacked(coord) {\r\n    const cell = this.grid[coord[0]][coord[1]];\r\n\r\n    return cell.markStatus;\r\n  }\r\n\r\n  receiveAttack(coord) {\r\n    if (this.lastAttack.length !== 0) {\r\n      const cell = this.grid[this.lastAttack[0]][this.lastAttack[1]];\r\n      cell.markStatus = \"hit\";\r\n    }\r\n\r\n    this.lastAttack = coord;\r\n    const cellToAttack = this.grid[coord[0]][coord[1]];\r\n    cellToAttack.markStatus = \"last\";\r\n    const ship = cellToAttack.ship.shipObj;\r\n    if (ship) {\r\n      ship.hit();\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  isGameOver() {\r\n    return Object.values(this.allShips).every((ship) => ship.isSunk());\r\n  }\r\n\r\n  areAllShipsPlaced() {\r\n    return Object.values(this.allShips).every((ship) => ship.coords.length > 0);\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://battleship/./src/models/Gameboard.js?");

/***/ }),

/***/ "./src/models/Player.js":
/*!******************************!*\
  !*** ./src/models/Player.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _Gameboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Gameboard */ \"./src/models/Gameboard.js\");\n\r\n\r\nclass Player {\r\n  constructor(id) {\r\n    this.id = id;\r\n  }\r\n\r\n  isPlayerTurn = false;\r\n\r\n  isWinner = false;\r\n\r\n  togglePlayerTurn() {\r\n    this.isPlayerTurn = !this.isPlayerTurn;\r\n  }\r\n\r\n  attack(gameboard, coord) {\r\n    if (!this.isPlayerTurn || gameboard.isAttacked(coord)) {\r\n      return false;\r\n    }\r\n\r\n    const didHitShip = gameboard.receiveAttack(coord);\r\n    this.isPlayerTurn = didHitShip ? true : false;\r\n    return didHitShip;\r\n  }\r\n\r\n  // Dummy version\r\n  genAIAttack(gameboard) {\r\n    const unattackedPositions = [];\r\n\r\n    for (let row = 0; row < gameboard.grid.length; row += 1) {\r\n      for (let col = 0; col < gameboard.grid[0].length; col += 1) {\r\n        const cell = gameboard.grid[row][col];\r\n        if (!cell.markStatus) {\r\n          unattackedPositions.push([row, col]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const randomCoord = Math.floor(Math.random() * unattackedPositions.length);\r\n    const didHitShip = gameboard.receiveAttack(\r\n      unattackedPositions[randomCoord]\r\n    );\r\n    this.isPlayerTurn = didHitShip ? true : false;\r\n    return didHitShip;\r\n  }\r\n\r\n  static giveRandomTurn(players) {\r\n    // const val = Gameboard.generateRandomNum(2);\r\n    // players[0].isPlayerTurn = val === 0 ? true : false;\r\n    // players[1].isPlayerTurn = val === 1 ? true : false;\r\n    players[0].isPlayerTurn = true;\r\n    players[1].isPlayerTurn = false;\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://battleship/./src/models/Player.js?");

/***/ }),

/***/ "./src/models/Ship.js":
/*!****************************!*\
  !*** ./src/models/Ship.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Ship)\n/* harmony export */ });\nclass Ship {\r\n  constructor(name, shipLength, axis) {\r\n    this.name = name;\r\n    this.shipLength = shipLength;\r\n    this.axis = axis;\r\n  }\r\n\r\n  numHits = 0;\r\n\r\n  coords = [];\r\n\r\n  isDraggable = true;\r\n\r\n  distanceFromMidToMouse = [];\r\n\r\n  initialX = 0;\r\n\r\n  initialY = 0;\r\n\r\n  hit() {\r\n    this.numHits += 1;\r\n  }\r\n\r\n  isSunk() {\r\n    return this.numHits === this.shipLength;\r\n  }\r\n\r\n  getCoordsForRotation() {\r\n    if (this.coords.length === 0) throw new Error(\"Ship is not on board yet.\");\r\n\r\n    const newCoords = [];\r\n    this.coords.forEach((c, i) => {\r\n      if (this.axis === \"x\") {\r\n        newCoords.push([c[0] + i, this.coords[0][1]]);\r\n      } else {\r\n        newCoords.push([this.coords[0][0], c[1] + i]);\r\n      }\r\n    });\r\n\r\n    return newCoords;\r\n  }\r\n\r\n  isSameDraggingPos(e) {\r\n    const oldX = this.initialX;\r\n    const oldY = this.initialY;\r\n    const newX = e.clientX;\r\n    const newY = e.clientY;\r\n    this.initialX = newX;\r\n    this.initialY = newY;\r\n    return oldX === newX && oldY === newY;\r\n  }\r\n\r\n  resetShipToOriginal() {\r\n    this.coords = [];\r\n    this.axis = \"x\";\r\n    this.distanceFromMidToMouse = [];\r\n    this.isDraggable = true;\r\n    this.initialX = 0;\r\n    this.initialY = 0;\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://battleship/./src/models/Ship.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;